var searchIndex = JSON.parse('{\
"compile":{"doc":"","t":[3,11,11,12,12,11,11,11,12,11,5,11,5,11,11,11],"n":["Args","borrow","borrow_mut","dump","file_path","fmt","from","from_args","intepret","into","main","redact_arg_values","run","try_from","try_into","type_id"],"q":["compile","","","","","","","","","","","","","","",""],"d":["Compile lox code in a single pass","","","output nicely formatted chunks","script path","","Returns the argument unchanged.","","interpret the compiled bytecode","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1],"f":[0,[[]],[[]],0,0,[[1,2],3],[[]],[[],[[5,[1,4]]]],0,[[]],[[]],[[],[[5,[[7,[6]],4]]]],[[[9,[8]],10,10],10],[[],5],[[],5],[[],11]],"p":[[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"EarlyExit"],[4,"Result"],[3,"String"],[3,"Vec"],[3,"Path"],[8,"AsRef"],[15,"bool"],[3,"TypeId"]]},\
"interpret":{"doc":"","t":[3,11,11,12,11,11,11,5,11,5,11,11,11],"n":["Args","borrow","borrow_mut","file_path","from","from_args","into","main","redact_arg_values","run","try_from","try_into","type_id"],"q":["interpret","","","","","","","","","","","",""],"d":["Interpret lox code from the AST","","","script path","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,0,1,1,1],"f":[0,[[]],[[]],0,[[]],[[],[[3,[1,2]]]],[[]],[[]],[[],[[3,[[5,[4]],2]]]],[[[7,[6]]],8],[[],3],[[],3],[[],9]],"p":[[3,"Args"],[3,"EarlyExit"],[4,"Result"],[3,"String"],[3,"Vec"],[3,"Path"],[8,"AsRef"],[15,"bool"],[3,"TypeId"]]},\
"walox":{"doc":"The <code>lox</code> language.","t":[0,0,0,0,0,0,0,0,13,3,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,13,3,4,13,3,13,13,3,13,3,4,13,13,3,4,3,13,13,3,13,3,13,13,13,3,18,13,3,13,13,13,13,4,13,3,4,13,13,13,13,13,13,13,13,13,13,3,13,3,13,3,3,4,13,13,13,3,13,3,13,3,4,18,13,13,3,3,13,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,16,8,8,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,13,13,13,3,4,13,13,13,3,13,13,13,13,3,4,13,13,13,13,13,13,13,4,5,12,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,12,12,5,11,11,11,12,12,11,11,11,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,12,11,11,11,11,11,11,11,11,11,5,12,12,12,11,11,11,5,5,5,11,12,12,5,11,11,12,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,13,13,13,13,3,13,13,3,13,13,4,13,3,13,3,3,13,13,13,13,3,13,13,13,13,13,4,4,13,13,13,13,3,13,4,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,5,13,13,13,13,13,13,4,13,5,5,5,5,11,11,5,5,11,11,5,5,11,5,5,5,11,11,5,11,11,11,11,5,5,11,5,5,5,5,5,11,5,11,5,5,11,11,11,11,11,5,5,5,12,12,12,12,12,12,12,12,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,3,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,3,3,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,3,4,3,8,13,13,13,13,13,13,13,3,13,13,13,3,13,13,3,13,18,13,13,13,13,13,13,13,13,13,13,13,13,3,3,4,4,3,13,13,13,4,13,13,13,3,13,18,13,3,13,3,13,4,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,12,12,12,12,12],"n":["analysis","ast","compiler","interpreter","parser","scanner","span","vm","AlreadyDefinedVariable","AstValidator","InheritFromSelf","ReturnInsideInitializer","ReturnOutsideFunction","SuperUseOutsideSubClass","ThisUseOutsideMethod","ValidationError","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combine_output","default","default_output","fmt","fmt","fmt","from","from","into","into","provide","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","validate","visit_class_decl","visit_func_decl","visit_return_stmnt","visit_super_expr","visit_this_expr","Add","And","And","Assign","AssignExpr","Binary","BinaryExpr","BinaryOpKind","Block","BlockStatement","Boolean","Call","CallExpr","Class","ClassDeclaration","ConversionError","Div","Equal","Expr","ExprKind","ExprStatement","Expression","Function","FunctionDeclaration","Get","GetExpr","Greater","GreaterEqual","Grouping","GroupingExpr","INITIALIZER_METHOD_NAME","If","IfStatement","Less","LessEqual","Literal","Literal","LiteralExpr","Logical","LogicalExpr","LogicalOpKind","Mult","Negate","Not","NotEqual","Null","Number","Op","Or","Or","Print","PrintStatement","Return","ReturnStatement","Set","SetExpr","Statement","StatementKind","String","Sub","Super","SuperExpr","This","ThisExpr","Unary","UnaryExpr","UnaryOpKind","VARIABLE_NAME","Var","Var","VarDeclaration","VarExpr","While","WhileStatement","arguments","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callee","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","condition","else_branch","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","initializer","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kind","kind","left","left","method","methods","name","name","name","name","name","object","object","operator","operator","operator","parameters","printer","property","property","provide","right","right","right","span","span","statements","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","super_visit_with","superclass","symbol","symbol","symbol","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","visit","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","visit_with","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Printer","borrow","borrow_mut","combine_output","default_output","fmt","from","into","print","try_from","try_into","type_id","visit_assign_expr","visit_binary_expr","visit_grouping_expr","visit_literal_expr","visit_logical_expr","visit_unary_expr","visit_var_expr","Output","Visitable","Visitor","combine_many_output","combine_output","default_output","super_visit_with","visit_assign_expr","visit_binary_expr","visit_block_stmnt","visit_call_expr","visit_class_decl","visit_expr","visit_expr_stmnt","visit_func_decl","visit_get_expr","visit_grouping_expr","visit_if_stmnt","visit_literal_expr","visit_logical_expr","visit_print_stmnt","visit_return_stmnt","visit_set_expr","visit_statement","visit_super_expr","visit_this_expr","visit_unary_expr","visit_var_decl","visit_var_expr","visit_while_stmnt","visit_with","And","Assignment","Call","ChunkError","Comparison","Compiler","CompilerError","Equality","Factor","Function","FunctionBuilder","FunctionType","Global","InvalidAssignmentTarget","Local","LocalVariable","MissingLiteral","MissingToken","None","Or","ParseRule","Precedence","Primary","RedeclareLocalVariable","ScanError","Script","Term","Unary","UnexpectedToken","VariableRef","and","arity","begin_scope","binary","block_statement","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","chunk","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compile","current","cursor","declaration","declare_variable","default","define_variable","depth","enclosing","end_scope","eq","eq","eq","expression","fmt","fmt","fmt","fmt","fmt","fmt","fn_type","from","from","from","from","from","from","from","from","from","from","from","get_rule","grouping","hash","if_statement","infix_fn_impl","into","into","into","into","into","into","into","into","is_global_scope","literal","locals","name","name","new","new","next_highest","number","or","parse_precedence","partial_cmp","precedence","prefix_fn_impl","print_statement","provide","resolve_variable","scope_depth","source","statement","string","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","0","0","0","actual","expected","name","0","0","AccessMissingField","AccessPropertyNonObject","Boolean","CalledNonFunctionType","Class","Class","DefineBindingInFrozenEnvironment","Environment","Exception","Function","FunctionType","Initializer","Instance","Instance","Interpreter","InvalidOperationForType","InvalidOperationForType","Method","MismatchedArity","MissingChildEnvironment","NativeFunction","NativeFunction","NonClassSuperClass","Null","Number","Return","RuntimeControlFlow","RuntimeException","SetPropertyNonObject","String","TopLevelReturn","UndefinedVariable","UserFunction","UserFunction","Value","arity","arity","assign","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closure","combine_output","constructor","declaration","default_output","define","env","env","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","f","fields","find_method","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","function_type","get","get_child","global","interpret","into","into","into","into","into","into","into","into","into","into","into","is_truthy","lookup","methods","name","name","native_funcs","new","new_child","provide","provide","set","source","stdout","stdout","superclass","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_assign_expr","visit_binary_expr","visit_block_stmnt","visit_call_expr","visit_class_decl","visit_expr_stmnt","visit_func_decl","visit_get_expr","visit_grouping_expr","visit_if_stmnt","visit_literal_expr","visit_logical_expr","visit_print_stmnt","visit_return_stmnt","visit_set_expr","visit_super_expr","visit_this_expr","visit_unary_expr","visit_var_decl","visit_var_expr","visit_while_stmnt","0","0","0","0","0","0","0","0","callee_name","expected","field_name","provided","0","0","0","0","0","0","0","DEFAULTS","clock","InputRequired","InvalidAssignmentTarget","MisplacedToken","MissingLiteral","MissingToken","OpConversion","ParseError","Scanning","addition","and","assignment","block","borrow","borrow_mut","call","class_declaration","clone","clone_into","comparison","declaration","eq","equality","expr_statement","expression","fmt","fmt","for_statement","from","from","from","from","function_declaration","if_statement","into","multiplication","or","parse","primary","print_statement","provide","return_statement","source","statement","synchronize","to_owned","to_string","try_from","try_into","type_id","unary","var_declaration","while_statement","0","0","0","failed_in","failed_in","required","token","0","And","Bang","BangEqual","Class","Comma","Cursor","Dot","Else","Equal","EqualEqual","Error","F64ParseFailure","False","For","Fun","Greater","GreaterEqual","Identifier","Identifier","If","LeftBrace","LeftParen","Less","LessEqual","Literal","Minus","MissingTokenError","Nil","Number","Number","Or","Plus","Print","Return","RightBrace","RightParen","ScanError","Scanner","Semicolon","Slash","Star","String","String","Super","This","Token","TokenTryFromError","TokenType","True","UnexpectedChar","UnterminatedString","Var","While","advance","advance_if","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comments","consume","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","into","into","into","into_iter","is_empty","keywords","length","literal","msg","new","new","next","peek","previous","provide","provide","provide","scan_token","source","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_identifier_name","0","0","0","0","0","Span","borrow","borrow_mut","clone","clone_into","dummy","envelop","eq","fmt","from","hash","into","line","new","range","to_owned","try_from","try_into","type_id","Add","Bool","CallFrame","Chunk","ChunkBuilder","ChunkError","ChunkIter","ConcreteObject","Constant","Conversion","DefineGlobal","Divide","Equal","False","Function","FunctionObject","GetGlobal","GetLocal","Greater","Heap","IncompatibleTypes","IncompletePatches","Instruction","InsufficientRemainingData","JUMP_OP_ARGUMENT_SIZE","Jump","JumpIfFalse","Less","Loop","MissingFinalReturn","Multiply","Negate","Nil","Nil","Not","Number","Object","ObjectBase","ObjectRef","ObjectType","OpCode","OpaqueObject","Pop","Print","Return","RuntimeError","SetGlobal","SetLocal","String","StringObject","Subtract","TYPE","True","TryFromByteError","UndefinedVariable","VM","Validation","Value","allocate_function","allocate_string","arguments","arguments_size","arity","base","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast","chunk","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete_patch","constant_inst","constant_string_inst","constants","decode_instruction_at","default","define_global_variable","deref","display_fmt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","first_instruction_pointer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","function","get_last_line","globals","hash","hash","hash","heap","instructions","interpret","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","ip","is","is_falsey","is_object_type","iter","jump_inst","line_numbers","loop_inst","name","new","new","new","new","next","next_obj","obj_type","op","partial_eq","prepare_loop","provide","provide","provide","read","read","read_u16_argument","return_inst","simple_inst","source","source","stack","stack_offset","stdout","to_object_type","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_byte","try_from_byte_unchecked","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_str","u16_argument_to_bytes","upcast","upcast","validate_instructions","value","variable_inst","write_disassembled","write_u16_argument","0","actual","expected","0","0","0","0","0","0"],"q":["walox","","","","","","","","walox::analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::astwalox::ast::ConversionError","","walox::ast::ExprKind","","","","","","","","","","","","walox::ast::LiteralExpr","","","walox::ast::StatementKind","","","","","","","","","walox::ast::printer","","","","","","","","","","","","","","","","","","","walox::ast::visit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::compiler::CompilerError","","","","","","walox::compiler::VariableRef","","walox::interpreterwalox::interpreter::RuntimeControlFlow","","walox::interpreter::RuntimeException","","","","","","","","","","walox::interpreter::Value","","","","","","","walox::interpreter::native_funcs","","walox::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox::parser::ParseError","","","","","","","walox::scannerwalox::scanner::Literal","","","walox::scanner::ScanError","","walox::span","","","","","","","","","","","","","","","","","","","walox::vmwalox::vm::ChunkError","","","walox::vm::RuntimeError","","","walox::vm::Value","",""],"d":["This module contains static analysis tools for lox AST …","Abstract syntax tree definitions and utilities","Utilities for the single-pass compiler","Tree-walking interpreter for the AST","Parser implementation","Tools for working with <code>lox</code> source code","Common structures for reporting and selecting information …","Virtual machine implementation","Attempted to redefine a variable that already exists","Traverse the AST and assert specific properties like no …","Attempted to have a class inherit from itself","Attempted to <code>return</code> a value inside of a class <code>init</code> method","Attempted to <code>return</code> outside of a function","Attempted to use <code>super</code> outside of a class that superclass","Attempted to access the <code>this</code> variable outside of a class …","Types of errors that occur when traversing the complete …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Perform checks on given AST chunk, returning errors that …","","","","","","Addition operation, symbolized by <code>+</code>","Boolean AND operation, symbolized by <code>and</code>","Logical AND operation, if the left and right operands are …","An assignment to an existing variable","An assignment to an existing variable","A binary operation","A binary operation","Different types of binary operations","A block statement contains a list of other statements and …","A block statement contains a list of other statements and …","A boolean value","An expression that calls a function with the supplied …","An expression that calls a function with the supplied …","A class declaration defines the methods of a new class …","A class declaration defines the methods of a new class …","Errors that occur when converting to AST elements","Division operation, symbolized by <code>/</code>","Comparison equal operation, symbolized by <code>==</code>","Syntax tree of a lox expression","Different types of expressions","A statement consisting a single expression followed by a …","A statement consisting a single expression followed by a …","A function declaration defines the arguments and body of a …","A function declaration defines the arguments and body of a …","An expression that access a named property on an object","An expression that access a named property on an object","Comparison greater than operation, symbolized by <code>&gt;</code>","Comparison greater than or equal operation, symbolized by …","Different types of binary operations","An expression that is delimited by parentheses","The name of initializer methods","An if statement lets you conditionally execute statements","An if statement lets you conditionally execute statements","Comparison less than operation, symbolized by <code>&lt;</code>","Comparison less than or equal operation, symbolized by <code>&lt;=</code>","An error that occurs when mapping token literals to …","A literal value","A literal value","A logical operation","A logical operation","Different types of logical operations","Multiplication operation, symbolized by <code>*</code>","Negation operation, symbolized by <code>-</code>","Boolean not operation, symbolized by <code>!</code>,","Comparison not equal operation, symbolized by <code>!=</code>","A null value","A numeric value","An error that occurs when converting from a raw <code>TokenType</code> …","Boolean OR operation, symbolized by <code>or</code>","Logical OR operation, if the left or right operands is …","A print statement which outputs text to standard out","A print statement which outputs text to standard out","A statement which immediately exits the containing …","A statement which immediately exits the containing …","An expression that sets the value of a named property on …","An expression that sets the value of a named property on …","Syntax tree of lox statements, the main elements of lox …","Different types of statements","A string value (UTF-8)","Subtraction operation, symbolized by <code>-</code>","An expression that acts as a property access on the …","An expression that acts as a property access on the …","An expression that references the value of the instance …","An expression that references the value of the instance …","A unary operation","A unary operation","Different types of unary operations","The string value of the <code>this</code> variable.","A variable reference","A var declaration defines and optionally initializes a …","A var declaration defines and optionally initializes a …","A variable reference expression","A while loop let you execute a statement multiple times …","A while loop let you execute a statement multiple times …","The expressions that will be passed to the body of the …","The part of the while loop that gets executed multiple …","The body of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An expression that should evaluate to a function to call","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The expression which decides which branch is taken","The condition controls the execution of the while loop, …","The statement representing the actions taken if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The expression to be evaluated","The expression evaluated and printed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The initial value of the variable","The inner expression","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The type of expression","The type of statement","The first argument to the operation","The left operand of the operation","The property that is being looked up on the superclass","The methods that belong to the class","The name of the variable","The name of the variable","The name of the variable binding","The name of the function","The name of the class","An expression that evaluates to the object that will be …","An expression that evaluates to the object that will be set","The type of binary operation","The type of unary operation","The type of logical operation","The names of the parameters to this function","An implementation of a <code>Visitor</code> which prints the structure …","The property name to access","The name of the property","","The second argument to the operation","The argument to the operation","The right operand of the operation","The continuous block of code this expression covers","The continuous block of code this statement covers","The statements that are present inside the block","","","","","","","","","","","","","","","","","","","","","","","","The superclass, if there is one","Return a static string which symbolizes this operation","Return a static string which symbolizes this operation","Return a static string which symbolizes this operation","The statement representing the actions taken if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of the assignment","The value to set the property to","The optional return value","Implementation of the visitor pattern for the AST data …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The AST printer","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Visit the given AST fragment and output its pretty printed …","","","","","","","","","","","The type of output produced by this <code>Visitor</code>","A type which is able to be traversed by a <code>Visitor</code>","A type which traverses <code>Visitable</code> data","Combine the output of multiple instances of visiting some …","Combine the output of 2 instances of visiting some data","The default value for this <code>Visitor</code>","Perform the default visiting of this piece of data","","","","","","","","","","","","","","","","","","","","","","","","Visit the this piece of data with the given <code>Visitor</code>","Logical and operation, <code>true and false</code>","Assignment expression, <code>x = 10</code>.","Function call or property access","This error occurs because of a failure in the chunk …","Numeric comparison operation, <code>1 &gt;= 2</code> or <code>2 &lt; 1</code>","A single-pass compiler into <code>lox</code> bytecode.","Errors that occur during the course of parsing and …","Equality comparison operation, <code>1 == 2</code> or <code>2 != 1</code>","Multiplication or division","A function that is defined within the source file as a …","A container for a <code>FunctionObject</code> in the process of being …","The type of function being compiled","A reference to a global variable, using the current chunk …","Attempted to assign to an invalid piece of syntax","A reference to a local variable, using the <code>locals</code> array …","A record of a compiled local variable","An error which occurs because a <code>Literal</code> was not present in …","An error which occurs because a specific <code>TokenType</code> was not …","Least precedence","Logical or operation, <code>true or false</code>","A rule for parsing in the case of a specific <code>TokenType</code>.","A relative measure of priority used while parsing.","Highest precedence level","This error occurs when attempting to declare a variable …","An error which occurs because of something in the scanning …","A function that encapsulates all the top-level code in the …","Addition or subtraction","Numeric or logical negation","An error which occurs when encountering an unexpected …","A reference to a variable, either global or local.","Attempt to parse an “and” logical infix expression.","The number of input parameters for this function","Start a new scope","Attempt to compile a binary operation, having observed a …","Compile an block statement","","","","","","","","","","","","","","","","","Finalize the function being constructed and return an …","The chunk being built.","","","","","","","","Compile <code>lox</code> source","The chunk being built.","The stream of token from the source code.","Compile a declaration.","Declare a new variable in the current scope and prepare …","","For an already declared variable in the current scope:","The depth that this variable was recorded","The parent function of this function or None if this is …","End the current scope and emit instructions to clean up …","","","","Compile an expression.","","","","","","","The type of the function being built","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Return the <code>ParseRule</code> for the specific <code>TokenType</code>.","Attempt to compile a grouped expression, having already …","","Attempt to compile an if statement","The function that will be used to parse an infix instance …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the Compiler is in the context of a global …","Attempt to compile a literal (boolean or nil) expression, …","The set of local variables in scope","The function name","The name of the variable","Create a new compiler for the given source of tokens.","Create a new context for constructing functions","Produce the next highest <code>Precedence</code> level, saturating at …","Attempt to compile a numeric literal, having already …","Attempt to parse an “or” logical infix expression.","Parse the next token, dispatching to a more specific parse …","","The priority of this rule.","The function that will be used to parse a prefix instance …","Attempt to compile a print statement.","","Search for a variable with the matching name.","How many scopes deep the compiler currently is","","Compile a statement.","Attempt to parse a string expression, having observed a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to compile a unary operation, having already …","","","","The <code>TokenType</code> encountered in the stream.","The expected <code>TokenType</code> in a static message.","The name of the existing variable.","","","Attempted to access a field which did not exist on the …","Attempted to access a property on a <code>Value</code> that was not an …","A boolean value","Attempted to call a non-function type failed","A class is an extensible collection of methods that is …","A class is an extensible collection of methods that is …","Attempted to define a new variable binding on a frozen …","The set of bindings that are present in lexical scopes …","An exception immediately unwinds the interpreter, without …","A normal function","Different types of functions","A method defined with the name <code>init</code>.","An instantiation of a class","An instantiation of a class","The AST interpreter","An error that occurs when performing an operation between …","An error that occurs when performing an operation between …","A method defined inside of a class","Attempted to a call a <code>Function</code> with too many or too few …","Missing child environment on <code>super</code> lookup","A function that is defined by the interpreter","A callable value provided by the host environment","Attempted to define a non-class value as superclass","A null value","A numeric value","A return immediately unwinds the interpreter to the …","Errors that can occur during the course of interpretation","Errors that can occur during the course of interpretation","Attempted to set a property on a <code>Value</code> that was not an …","A string value (UTF-8)","Attempted to return without a containing function","A variable lookup failed because the name is not bound","A user defined function","A callable value defined by the user","A lox value","Return the number of parameters of <code>UserFunction</code>.","The number of parameters of the native function","Assign a new value to a variable, erroring if the variable …","Create a new copy of the function that has the <code>this</code> …","","","","","","","","","","","","","","","","","","","","","","","Evaluate this <code>NativeFunction</code> with the provided arguments","Evaluate this <code>UserFunction</code> with the provided arguments and …","The <code>Class</code> that this instance is derived from","","","","","","","","","","","","","","","","","","","","","The parent environment of this closure, contains all …","","Create an instance of this class","The content of the function: parameters + body.","","Define a variable, shadowing any variable with the same …","Mutably access the environment of this <code>Interpreter</code>","The environment, which holds the complete set of variable …","","","","","","","","","","","The underlying implementation of the native function","The mapping from names to <code>Value</code>s for this instance","Search for a method of this <code>Class</code> that has the given name.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","The type of user function","Access a property of this <code>Instance</code>","Return a copy of a child environment.","Create a new global environment.","Visit the given AST fragments and evaluate them","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if the value is “truthy”","Attempt to get the <code>Value</code> associated with the given …","The methods defined on this class","The name of the native function","The name of the class","Commonly used functions that the host environment provides …","Create a new <code>Interpreter</code> with the default set of …","Create a new lexical environment that is a child of the …","","","Set the value of a property on this <code>Instance</code>.","","Mutable access the stdout of this <code>Interpreter</code>","The standard out buffer, used to print things to screen","The superclass of this class, if any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The statically known type of the value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The function that attempted to call","The number of arguments expected","The property that was attempted access with","The number of arguments provided","","","","","","","","The default list of native functions","A native function which takes no arguments and returns the …","Parsing failed because the end of the token stream was …","An error produced when the assignment target was illegal","An error which occurs because the token was unexpected in …","An error which occurs because a <code>Literal</code> was not present in …","An error produced by the <code>Cursor</code> when an expected <code>Token</code> is …","Converting from a <code>TokenType</code> to an <code>{Unary,Binary}OpKind</code> …","An error that can occur during the parsing process","The scanner produced some error while creating <code>Token</code>s","Parse an addition or subtraction expression","Parse an AND logical expression","Parse an assignment expression","Parse a block of statements","","","Parse a function call expression","Parse a class declaration","","","Parse a comparison expression","Parse a declaration or fall through to a normal statement","","Parse an equality expression","Parse an expression statement","Parse an expression","","","Parse a for statement","","","","Returns the argument unchanged.","Parse a function declaraction","Parse an if statement","Calls <code>U::from(self)</code>.","Parse a multiplication or division expression","Parse an OR logical expression","Parse <code>lox</code> source","Parse a primary expression: a literal or a grouping …","Parse a print statement","","Parse a return statement","","Parse a statement","Take the current state of the <code>Cursor</code> and attempt to …","","","","","","Parse a unary operation expression","Parse a variable declaraction","Parse a while statement","","","","The parse function that the error was produced in","The parse function that the error was procued in","The minimum number of tokens required, if known","The token which was unexpected","","<code>and</code>","<code>!</code>","<code>!=</code>","<code>class</code>","<code>,</code>","A struct which manages the state of the <code>Token</code> iterator and …","<code>.</code>","<code>else</code>","<code>=</code>","<code>==</code>","Error token, used to transmit error through <code>Token</code> iterator","A failure occured while parsing a floating point number","<code>false</code>","<code>for</code>","<code>fun</code>","<code>&gt;</code>","<code>&gt;=</code>","A name","An identifier is a name, such as <code>abc</code>, <code>a23</code>, <code>brownCowNow</code>","<code>if</code>","<code>{</code>","<code>(</code>","<code>&lt;</code>","<code>&lt;=</code>","A literal value embedded in the source code","<code>-</code>","A <code>Cursor</code> expected a <code>TokenType</code> that was not found","<code>nil</code>","A numeric value","A numerical value, <code>123</code>, <code>1.234</code>, <code>0.0</code>","<code>or</code>","<code>+</code>","<code>print</code>","<code>return</code>","<code>}</code>","<code>)</code>","Errors that can occur during the scanning process","The <code>Scanner</code> takes raw text input and produces a sequence …","<code>;</code>","<code>/</code>","<code>*</code>","A text value","A piece of embedded text in the source, <code>&quot;Stinsdlksjdlfkjsd&quot;</code>","<code>super</code>","<code>this</code>","A <code>Token</code> is an instance of a chunk of text with meaning, …","An error that occurs when trying to convert from <code>u8</code> to …","The <code>TokenType</code> represent the type of the chunks of text","<code>true</code>","An unexpected character was present in the input","A string literal did not have a closing <code>&quot;</code>","<code>var</code>","<code>while</code>","Advance the token stream","Advance the token stream, if the next token matches one of …","","","","","","","","","","","","","","","","","Return true if the next token type matches the provided …","","","","","","","","","","","","","","","The list of comments collected during scanning of source","Advance the token stream if the next token matches the …","","","","","","","The error from the token, if it is a <code>TokenType::Error</code>,","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return true if the token stream is empty","Return the mapping from keyword strings to <code>TokenType</code>s.","Return the length of the token if it is known statically","The value of the token, if it is a <code>Literal</code>","The accompanying message to the error","Create a new <code>Scanner</code> for the given text","Create a new <code>Cursor</code>","","Look at the next token without advancing","Return a reference to the last <code>Token</code> that was produced, if …","","","","Consume the input and return the next <code>Token</code>, if it exists","","The <code>Span</code> that the token occupies in the source code","The span of the expected token.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of token","","","","","","","","","Unwrap the <code>Identifier</code> literal inner <code>String</code> value, …","","","","","","A representation of a continuous block of source code","","","","","Create an empty <code>Span</code> on an illogical line","Create a <code>Span</code> which envelops all the provided sub-<code>Span</code>s","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return the line of this <code>Span</code>","Create a new <code>Span</code> for the given line and source range","Return the range covered by this <code>Span</code>","","","","","Add two <code>Value</code>s","<code>true</code> or <code>false</code>","The call frame tracks the live information needed for …","An immutable structure that contains compiled <code>Instruction</code>s …","A builder structure that represents a <code>Chunk</code> in the process …","Errors that occur while iterating overing <code>Instruction</code>s.","An iterator over all the instructions in a <code>Chunk</code>.","This trait encompasses the behavior of all concrete object …","Load a constant onto the stack","Error converting a byte to a valid <code>OpCode</code>","Define a global variable with an initial value","Divide two <code>Value</code>s","Compare two <code>Value</code>s and return <code>true</code> if they are equal.","Push a constant <code>Value::Bool(false)</code> onto the stack.","The type of an Object that represents a source …","A function defined in the lox source code","Read a global variable’s value","Read a local variable","Compare two <code>Value::Number</code> and return <code>true</code> if the lhs is …","A memory region that contains <code>Value</code>s, separate from the …","Attempted an operation with incompatible types","The <code>ChunkBuilder</code> has incomplete patches, which means that …","An <code>Instruction</code> is the basic unit of execution in the lox …","Error when attempting to read <code>Instruction</code> arguments data, …","The number of bytes for the jump operation arguments.","Unconditionally increment the <code>ip</code> variable","Increment the <code>ip</code> variable if the top of the stack is falsey","Compare two <code>Value::Number</code> and return <code>true</code> if the lhs is …","Unconditionally decrement the <code>ip</code> variable","A <code>Chunk</code> is not valid unless it has a <code>Opcode::Return</code> at the …","Multiple two <code>Value</code>s","Numeric inverse","Push a constant <code>Value::Nil</code> onto the stack.","<code>nil</code>","Boolean inverse","Numeric value: <code>12300</code>, <code>-1.23004</code>, etc","Any heap allocated value","The base fields of all Objects","A non-opaque object reference.","The type of an Object","Virtual machine instruction type","An opaque object reference.","Pop the top value off the stack and do nothing with it","Pop the top value off the stack and write it to stdout","Return from the current function","Errors that can occur during the execution of bytecode.","Write a new value to an existing global variable","Set a local variable","The type of an Object that contains immutable text data","An immutable String object","Subtract two <code>Value</code>s","The <code>ObjectType</code> of the <code>ConcreteObject</code>.","Push a constant <code>Value::Bool(true)</code> onto the stack.","The error type returned when conversion from a byte to an …","Attempted to read a global variable which did not exist","The virtual machine that executions <code>Instructions</code>","Error that occured while validating a chunk before …","The value type of the virtual machine","Allocate a new <code>FunctionObject</code> in the <code>Heap</code>.","Allocate a new <code>StringObject</code> in the <code>Heap</code>.","Extra data that is necessary to execute the instruction","Returns the number of bytes of extra information needed to …","The number of function arguments","The base fields of the <code>StringObject</code>.","The base fields of the <code>FunctionObject</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume this <code>ChunkBuilder</code> and return an immutable <code>Chunk</code>.","Create a non-opaque object reference that will eliminate …","The bytecode of the function","Reset all the state of the <code>VM</code>, deallocating some excess …","Reset the contents of the <code>Heap</code>, all <code>Objects</code> will be …","","","","","","","","","","","","","","","","","","","","","Complete the given patch object by writing to the section …","Write a new <code>OpCode::Constant</code> instruction to the chunk.","Allocate a new constant <code>StringObject</code> and write a new …","The list of constants that are referenced by <code>Instruction</code>s …","Attempt to decode an instruction at the given offset and …","","Create a new <code>String</code> value and write it to the constant …","","Write to the formatter the representation that would …","","","","","","","","","","","","","","Return a pointer to the first byte of instructions of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The stack of functions being executed","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","The function being executed","Return the last line number or 0 if no line numbers exist","Current set of global variables","","","","The heap memory region, containing <code>Value</code>s separate from …","The instructions data, filled with <code>OpCode</code>s and arguments.","Safely execute the current <code>Chunk</code> to completion.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Instruction pointer","Return <code>true</code> if this Object is a reference to the <code>T</code> …","Returns <code>true</code> if this <code>Value</code> is <code>false</code> or <code>false</code> equivalent.","Return <code>true</code> if this <code>Value</code> is an <code>Object</code> of the specific …","Return an iterator over all the instructions contained in …","Write a new jump instruction and return a new <code>Patch</code> object …","A run-length encoding of the line numbers for each byte of …","Write a new <code>OpCode::Loop</code> instruction that will jump back …","The function name","Create a new <code>VM</code> with the given output and code <code>Chunk</code>.","Create a new <code>ChunkBuilder</code> with the given <code>Heap</code>.","Create a new, empty <code>Heap</code>.","Create a new function call frame","","The last allocated <code>Object</code> prior to this one, part of the …","The type of Object that this base is a part of","The type of instruction","Return <code>true</code> if this Object is equivalent to the given …","Prepare a patch for a future <code>OpCode::Loop</code> instruction.","","","","Returns some reference to the inner object","Returns some reference to the value if it is of type T, or …","Attempt to read a u16 value in little endian format from …","Write a new <code>OpCode::Return</code> instruction to the chunk.","Write a new simple (no extra data) instruction to the …","","","The stack of <code>Value</code>s.","The offset into the <code>stack</code> array this frame uses to access …","The standard out buffer, used to print things to screen","Return a reference to a concrete object, if this <code>Value</code> is …","Cast object reference back to an opaque version, losing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to onvert from a byte representation to the <code>OpCode</code> …","Convert from a byte representation to the <code>OpCode</code> enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The statically known type of the value","Given a u16 argument, convert it to bytes in little endian …","Take a mutable pointer to a <code>ConcreteObject</code> value, and …","Take a mutable pointer to a <code>ConcreteObject</code> value, and …","Validate the instruction in this chunk, returning <code>Ok(())</code> …","The string content","Write a new <code>OpCode::DefineGlobal</code>, <code>OpCode::GetGlobal</code>, or …","Write to the given output a specially formatted version of …","Given a mutable buffer, write a u16 argument in the …","","How many bytes were actually in the buffer","How many bytes were expected","","","","","",""],"i":[0,0,0,0,0,0,0,0,2,0,2,2,2,2,2,0,1,2,1,2,1,2,1,2,1,1,1,1,2,2,1,2,1,2,2,1,2,2,1,2,1,2,1,2,1,1,1,1,1,1,19,19,25,17,0,17,0,0,32,0,21,17,0,32,0,0,19,19,0,0,0,32,32,0,17,0,19,19,17,0,10,32,0,19,19,15,17,0,17,0,0,19,23,23,19,21,21,15,19,25,32,0,32,0,17,0,0,0,21,19,17,0,17,0,17,0,0,14,17,32,0,0,32,0,28,38,11,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,28,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,37,38,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,33,34,15,15,16,17,18,19,19,20,21,21,22,23,23,24,25,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,32,32,32,32,32,32,32,32,32,33,34,35,36,37,38,11,12,10,19,23,25,35,20,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,16,31,18,24,13,10,26,27,35,11,10,29,30,18,22,24,11,0,29,30,15,18,22,24,16,31,36,16,18,20,21,22,24,26,27,28,29,30,14,13,31,33,34,35,36,37,38,11,12,10,10,19,23,25,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,19,21,23,25,15,16,17,18,19,19,20,21,21,22,23,23,24,25,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,13,31,32,33,34,35,36,37,38,11,12,10,27,30,12,0,16,18,20,21,22,24,26,27,28,29,30,14,13,31,33,34,35,36,37,38,11,12,10,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,0,43,43,43,43,43,43,43,0,43,43,43,43,43,43,43,43,43,43,139,0,0,139,139,139,9,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,9,51,51,51,46,51,0,0,51,51,52,0,0,57,46,57,0,46,46,51,51,0,0,51,46,46,52,51,51,46,0,0,47,45,0,0,45,47,62,51,52,57,58,46,45,47,62,51,52,57,58,46,47,47,51,52,46,51,52,46,51,0,45,45,0,45,51,45,58,47,45,51,52,46,0,51,52,57,58,46,46,47,45,47,62,51,52,57,58,46,46,46,46,51,0,51,0,62,45,47,62,51,52,57,58,46,45,0,47,47,58,45,47,51,0,0,0,51,62,62,0,46,45,47,46,0,0,51,52,46,46,45,47,62,51,52,57,58,46,45,47,62,51,52,57,58,46,45,47,62,51,52,57,58,46,0,140,141,142,143,143,144,145,146,69,69,68,69,0,68,69,0,72,74,0,74,0,68,0,0,69,74,69,69,0,68,69,68,68,72,0,0,69,68,69,69,0,68,0,66,71,67,66,73,67,68,71,66,74,75,76,72,69,77,73,67,68,71,66,74,75,76,72,69,77,71,66,76,67,68,71,66,74,75,76,72,69,77,67,68,71,66,74,75,76,72,69,77,66,73,75,66,73,67,73,73,67,68,71,66,74,75,76,72,69,77,71,76,75,73,67,68,68,71,71,66,66,74,75,75,76,76,72,69,69,77,77,73,67,68,68,68,68,68,68,68,68,68,68,71,66,74,75,76,72,72,72,69,69,69,77,66,76,67,67,73,73,67,68,71,66,74,75,76,72,69,77,68,67,75,71,75,0,73,67,69,77,76,69,73,73,75,67,68,71,66,74,75,76,72,69,77,68,71,66,75,76,69,77,73,67,68,71,66,74,75,76,72,69,77,73,67,68,71,66,74,75,76,72,69,77,68,73,67,68,71,66,74,75,76,72,69,77,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,147,148,149,150,151,152,153,154,155,155,156,155,157,158,159,160,161,162,163,0,0,81,81,81,81,81,81,0,81,0,0,0,0,81,81,0,0,81,81,0,0,81,0,0,0,81,81,0,81,81,81,81,0,0,81,0,0,0,0,0,81,0,81,0,0,81,81,81,81,81,0,0,0,164,165,166,167,168,167,168,83,41,41,41,41,41,0,41,41,41,41,41,60,41,41,41,41,41,42,41,41,41,41,41,41,0,41,0,41,42,41,41,41,41,41,41,41,0,0,41,41,41,42,41,41,41,0,0,0,41,60,60,41,41,80,80,89,60,82,42,41,83,80,59,89,60,82,42,41,83,80,59,80,60,82,42,41,83,80,59,60,82,42,41,83,80,59,89,80,60,82,42,41,83,59,82,60,60,82,42,42,41,83,83,80,59,59,89,60,60,82,42,41,83,80,59,41,83,59,89,60,82,42,41,83,80,59,89,80,41,41,82,59,89,80,89,80,80,60,83,59,89,60,82,59,60,82,42,41,83,80,59,60,42,83,59,89,60,82,42,41,41,83,80,59,89,60,82,42,41,83,80,59,82,89,60,82,42,41,83,80,59,82,169,170,171,172,173,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,99,105,0,0,0,0,0,0,99,61,99,99,99,99,106,0,99,99,99,0,108,61,0,61,99,99,99,99,99,61,99,99,99,105,99,105,105,0,0,0,0,0,99,99,99,0,99,99,106,0,99,101,99,0,108,0,108,0,54,54,103,99,49,63,49,110,102,96,61,100,103,99,104,105,54,50,97,106,107,63,49,109,108,110,102,96,61,100,103,99,104,105,54,50,97,106,107,63,49,109,108,100,97,49,102,54,61,103,99,104,105,50,97,106,107,108,61,103,99,104,105,50,97,106,107,108,100,100,100,96,96,54,100,50,97,96,61,103,99,104,105,50,97,106,63,63,49,108,96,96,61,61,100,103,99,99,99,99,99,99,104,104,105,105,54,50,50,97,97,106,107,63,63,49,49,109,108,108,102,110,102,96,61,61,100,103,99,104,105,105,105,105,54,50,97,106,107,63,49,109,108,108,109,100,102,103,99,106,102,96,102,110,102,96,61,100,103,99,104,105,54,50,97,106,107,63,49,109,108,110,96,109,97,105,105,96,100,96,100,49,102,100,54,109,110,107,107,103,97,100,61,104,108,50,97,103,100,100,61,108,102,109,102,105,50,61,103,99,104,105,50,97,106,107,108,61,99,104,105,50,97,63,49,108,110,102,96,61,100,103,99,99,104,105,54,50,97,106,107,63,49,109,108,99,99,110,102,96,61,100,103,99,104,105,54,50,97,106,107,63,49,109,108,110,102,96,61,100,103,99,104,105,54,50,97,106,107,63,49,109,108,105,103,101,101,96,63,100,96,103,174,175,175,176,177,178,179,180,181],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[1],[[],1],[1],[[1,3],4],[[2,3],4],[[2,3],4],[[]],[[]],[[]],[[]],[5],[[]],[[]],[[],6],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[1,9],[[7,[2]]]],[[1,10]],[[1,11]],[[1,12]],[[1,13]],[[1,14]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[14,14],[13,13],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[11,11],[12,12],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[15,15],39],[[16,16],39],[[17,17],39],[[18,18],39],[[19,19],39],[[20,20],39],[[21,21],39],[[22,22],39],[[23,23],39],[[24,24],39],[[25,25],39],[[26,26],39],[[27,27],39],[[28,28],39],[[29,29],39],[[30,30],39],[[14,14],39],[[13,13],39],[[31,31],39],[[32,32],39],[[33,33],39],[[34,34],39],[[35,35],39],[[36,36],39],[[37,37],39],[[38,38],39],[[11,11],39],[[12,12],39],[[10,10],39],0,0,[[15,3],4],[[15,3],4],[[16,3],4],[[17,3],4],[[18,3],4],[[19,3],4],[[19,3],4],[[20,3],4],[[21,3],4],[[21,3],4],[[22,3],4],[[23,3],4],[[23,3],4],[[24,3],4],[[25,3],4],[[25,3],4],[[26,3],4],[[27,3],4],[[28,3],4],[[29,3],4],[[30,3],4],[[14,3],4],[[13,3],4],[[31,3],4],[[32,3],4],[[33,3],4],[[34,3],4],[[35,3],4],[[36,3],4],[[37,3],4],[[38,3],4],[[11,3],4],[[12,3],4],[[10,3],4],[[]],[[]],[20,17],[18,17],[22,17],[24,17],[21,17],[13,17],[26,17],[27,17],[28,17],[[]],[29,17],[30,17],[14,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,32],[34,32],[11,32],[38,32],[33,32],[35,32],[37,32],[[]],[36,32],[12,32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19],[23],[25],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5],0,0,0,0,0,0,[16],[18],[20],[21],[22],[24],[26],[27],[28],[29],[30],[14],[13],[31],[33],[34],[35],[36],[37],[38],[11],[12],[10],0,[19,40],[23,40],[25,40],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[41,[[7,[19]]]],[[],7],[[],7],[42,[[7,[21]]]],[[],7],[41,[[7,[23]]]],[[],7],[[],7],[[],7],[41,[[7,[25]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,[16],[18],[20],[21],[22],[24],[26],[27],[28],[29],[30],[14],[13],[31],[33],[34],[35],[36],[37],[38],[11],[12],[10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[43],[43],[[43,3],4],[[]],[[]],[9,6],[[],7],[[],7],[[],8],[[43,27]],[[43,18]],[[43,20]],[[43,21]],[[43,24]],[[43,22]],[[43,26]],0,0,0,[44],[[]],[[]],[[]],[27],[18],[36],[28],[10],[16],[33],[11],[29],[20],[37],[21],[24],[34],[12],[30],[31],[13],[14],[22],[35],[26],[38],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[45,39],[[7,[46]]]],0,[45],[[45,39],[[7,[46]]]],[45,[[7,[46]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[47,48],[[7,[[50,[49]],46]]]],0,[51,51],[52,52],[46,46],[[]],[[]],[[]],[[51,51],53],[[44,54],[[7,[[50,[49]],[55,[46]]]]]],0,0,[45,[[7,[46]]]],[[45,56],[[7,[57,46]]]],[[],51],[[45,57,48]],0,0,[45],[[51,51],39],[[52,52],39],[[46,46],39],[45,[[7,[46]]]],[[51,3],4],[[52,3],4],[[57,3],4],[[58,3],4],[[46,3],4],[[46,3],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,46],[[]],[60,46],[61,46],[41,62],[[45,39],[[7,[46]]]],[51],[45,[[7,[46]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,39],[[45,39],[[7,[46]]]],0,0,0,[54,45],[[54,52,[50,[63]]],47],[51,51],[[45,39],[[7,[46]]]],[[45,39],[[7,[46]]]],[[45,51],[[7,[46]]]],[[51,51],[[64,[53]]]],0,0,[45,[[7,[46]]]],[5],[[45,56],57],0,[46,[[64,[65]]]],[45,[[7,[46]]]],[[45,39],[[7,[46]]]],[[]],[[]],[[]],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[45,39],[[7,[46]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[66,48],0,[[67,40,68],[[7,[69]]]],[[66,70],66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,[55,[68]]],[[7,[68,72]]]],[[66,73,[55,[68]]],[[7,[68,72]]]],0,[67,67],[68,68],[71,71],[66,66],[74,74],[75,75],[76,76],[72,72],[69,69],[77,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[73],[[70,73,[55,[68]]],[[7,[68,72]]]],0,[73],[[67,56,68]],[73,67],0,[[67,67],39],[[68,68],39],[[71,71],39],[[66,66],39],[[74,74],39],[[75,75],39],[[76,76],39],[[72,72],39],[[69,69],39],[[77,77],39],0,0,[[75,40],[[64,[66]]]],[[73,3],4],[[67,3],4],[[68,3],4],[[68,3],4],[[71,3],4],[[71,3],4],[[66,3],4],[[66,3],4],[[74,3],4],[[75,3],4],[[75,3],4],[[76,3],4],[[76,3],4],[[72,3],4],[[69,3],4],[[69,3],4],[[77,3],4],[[77,3],4],[[]],[[]],[39,68],[78,68],[21,68],[[[70,[75]]],68],[71,68],[21,68],[[[70,[76]]],68],[66,68],[[]],[56,68],[[]],[[]],[[]],[[]],[[]],[69,72],[68,72],[[]],[77,69],[72,69],[[]],[[]],0,[[70,56],[[7,[68,72]]]],[[67,48],[[64,[67]]]],[[],67],[73,[[7,[68,69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,39],[[67,40],[[7,[68,69]]]],0,0,0,0,[[],73],[67,67],[5],[5],[[76,56,68]],[69,[[64,[65]]]],[73,79],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[68,40],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[73,27]],[[73,18]],[[73,36]],[[73,28]],[[73,10]],[[73,33]],[[73,11]],[[73,29]],[[73,20]],[[73,37]],[[73,21]],[[73,24]],[[73,34]],[[73,12]],[[73,30]],[[73,13]],[[73,14]],[[73,22]],[[73,35]],[[73,26]],[[73,38]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],71],0,0,0,0,0,0,0,0,[80,[[7,[16,81]]]],[80,[[7,[16,81]]]],[80,[[7,[16,81]]]],[80,[[7,[81]]]],[[]],[[]],[80,[[7,[16,81]]]],[[80,82],[[7,[31,81]]]],[81,81],[[]],[80,[[7,[16,81]]]],[80,[[7,[31,81]]]],[[81,81],39],[80,[[7,[16,81]]]],[80,[[7,[31,81]]]],[80,[[7,[16,81]]]],[[81,3],4],[[81,3],4],[[80,82],[[7,[31,81]]]],[15,81],[59,81],[60,81],[[]],[80,[[7,[81]]]],[[80,82],[[7,[31,81]]]],[[]],[80,[[7,[16,81]]]],[80,[[7,[16,81]]]],[44,[[7,[[55,[31]],[55,[81]]]]]],[80,[[7,[16,81]]]],[80,[[7,[31,81]]]],[5],[[80,82],[[7,[31,81]]]],[81,[[64,[65]]]],[80,[[7,[31,81]]]],[80],[[]],[[],6],[[],7],[[],7],[[],8],[80,[[7,[16,81]]]],[[80,82],[[7,[31,81]]]],[[80,82],[[7,[31,81]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[80,[[64,[82]]]],[80,[[64,[82]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[80,41],39],[60,60],[82,82],[42,42],[41,41],[83,83],[[[80,[[0,[84,85]]]]],[[80,[[0,[84,85]]]]]],[59,59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[80,41,40],[[7,[82,59]]]],[[60,60],39],[[82,82],39],[[42,42],39],[[41,41],39],[[83,83],39],[[59,59],39],0,[[60,3],4],[[60,3],4],[[82,3],4],[[42,3],4],[[42,3],4],[[41,3],4],[[83,3],4],[[83,3],4],[[[80,[[0,[86,85]]]],3],4],[[59,3],4],[[59,3],4],[[]],[87,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41],[83],[59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,39],[[],[[88,[40,41]]]],[41,[[64,[48]]]],0,0,[40,89],[44,80],[89,64],[80,[[64,[82]]]],[80,[[64,[82]]]],[5],[5],[5],[89,[[7,[[64,[82]],60]]]],[60,[[64,[65]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[90,[[7,[41]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[82,56],0,0,0,0,0,0,[[]],[[]],[91,91],[[]],[[],91],[44,91],[[91,91],39],[[91,3],4],[[]],[91],[[]],[91,92],[[92,[93,[48]]],91],[91,94],[[]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[54,[50,[63]],95,96],97],[[54,[98,[6]]],97],0,[99,48],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,[[7,[96,61]]]],[97,[[64,[[50,[101]]]]]],0,[[[102,[79]]]],[54],[61,61],[103,103],[99,99],[104,104],[105,105],[[[50,[101]]],[[50,[101]]]],[97,97],[106,106],[107,107],[108,108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[100,[98,[105]],48]],[[100,[98,[6]],48]],0,[[96,48]],[[],54],[[100,[98,[6]]],90],[[[50,[101]]]],[[97,3],4],[[96,96],39],[[61,61],39],[[103,103],39],[[99,99],39],[[104,104],39],[[105,105],39],[[[50,[101]],[50,[101]]],39],[[97,97],39],[[106,106],39],[[63,63],39],[[63,40],39],[[49,49],39],[[108,108],39],[96,90],[[96,3],4],[[61,3],4],[[61,3],4],[[100,3],4],[[103,3],4],[[99,3],4],[[99,3],4],[[99,3],4],[[99,3],4],[[99,3],4],[[99,3],4],[[104,3],4],[[104,3],4],[[105,3],4],[[105,3],4],[[54,3],4],[[[50,[101]],3],4],[[[50,[86]],3],4],[[97,3],4],[[97,3],4],[[106,3],4],[[107,3],4],[[63,3],4],[[63,3],4],[[49,3],4],[[49,3],4],[[109,3],4],[[108,3],4],[[108,3],4],0,[[]],[[]],[[]],[104,61],[[]],[[]],[[]],[[]],[[]],[78,105],[97,105],[39,105],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,108],[[]],0,[100,48],0,[103],[99],[106],0,0,[[[102,[79]]],[[7,[108]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96],0,[97,39],[105,39],[105,39],[96,110],0,0,0,0,[[79,[50,[49]],54],[[102,[79]]]],[54,100],[[],54],[[[50,[49]],48],109],[110,64],0,0,0,[[97,97],39],0,[5],[5],[5],[[[50,[101]]]],[97,64],[103,[[7,[95,111]]]],[[100,48]],[[100,99,48]],[61,[[64,[65]]]],[108,[[64,[65]]]],0,0,0,[105,64],[[[50,[101]]],97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[90,[[7,[99]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[90,[[7,[99,104]]]],[90,99],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[105,40],[95],[[],97],[[],97],[96,[[7,[[55,[61]]]]]],0,[[100,99,90,48]],[[96,79,[64,[40]]],112],[95],0,0,0,0,0,0,0,0,0],"p":[[3,"AstValidator"],[4,"ValidationError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Visitable"],[3,"ClassDeclaration"],[3,"FunctionDeclaration"],[3,"ReturnStatement"],[3,"SuperExpr"],[3,"ThisExpr"],[4,"ConversionError"],[3,"Expr"],[4,"ExprKind"],[3,"BinaryExpr"],[4,"BinaryOpKind"],[3,"GroupingExpr"],[4,"LiteralExpr"],[3,"UnaryExpr"],[4,"UnaryOpKind"],[3,"LogicalExpr"],[4,"LogicalOpKind"],[3,"VarExpr"],[3,"AssignExpr"],[3,"CallExpr"],[3,"GetExpr"],[3,"SetExpr"],[3,"Statement"],[4,"StatementKind"],[3,"ExprStatement"],[3,"PrintStatement"],[3,"VarDeclaration"],[3,"BlockStatement"],[3,"IfStatement"],[3,"WhileStatement"],[15,"bool"],[15,"str"],[4,"TokenType"],[4,"Literal"],[3,"Printer"],[8,"IntoIterator"],[3,"Compiler"],[4,"CompilerError"],[3,"FunctionBuilder"],[15,"usize"],[3,"FunctionObject"],[3,"ObjectRef"],[4,"Precedence"],[4,"FunctionType"],[4,"Ordering"],[3,"Heap"],[3,"Vec"],[3,"SmolStr"],[4,"VariableRef"],[3,"LocalVariable"],[3,"MissingTokenError"],[4,"ScanError"],[4,"ChunkError"],[3,"ParseRule"],[3,"StringObject"],[4,"Option"],[8,"Error"],[3,"UserFunction"],[3,"Environment"],[4,"Value"],[4,"RuntimeException"],[3,"Arc"],[3,"NativeFunction"],[4,"RuntimeControlFlow"],[3,"Interpreter"],[4,"FunctionType"],[3,"Class"],[3,"Instance"],[3,"InvalidOperationForType"],[15,"f64"],[8,"Write"],[3,"Cursor"],[4,"ParseError"],[3,"Token"],[3,"TokenTryFromError"],[8,"Clone"],[8,"Iterator"],[8,"Debug"],[3,"ParseFloatError"],[3,"HashMap"],[3,"Scanner"],[15,"u8"],[3,"Span"],[15,"u32"],[8,"RangeBounds"],[3,"Range"],[15,"u16"],[3,"Chunk"],[3,"OpaqueObject"],[8,"Into"],[4,"OpCode"],[3,"ChunkBuilder"],[8,"ConcreteObject"],[3,"VM"],[3,"Instruction"],[3,"TryFromByteError"],[4,"Value"],[4,"ObjectType"],[3,"ObjectBase"],[4,"RuntimeError"],[3,"CallFrame"],[3,"ChunkIter"],[3,"TryFromSliceError"],[6,"Result"],[13,"Op"],[13,"Literal"],[13,"Binary"],[13,"Grouping"],[13,"Literal"],[13,"Unary"],[13,"Logical"],[13,"Var"],[13,"Assign"],[13,"Call"],[13,"Get"],[13,"Set"],[13,"This"],[13,"Super"],[13,"Boolean"],[13,"Number"],[13,"String"],[13,"Expression"],[13,"Print"],[13,"Var"],[13,"Block"],[13,"If"],[13,"While"],[13,"Function"],[13,"Return"],[13,"Class"],[8,"Visitor"],[13,"MissingToken"],[13,"ScanError"],[13,"ChunkError"],[13,"UnexpectedToken"],[13,"RedeclareLocalVariable"],[13,"Global"],[13,"Local"],[13,"Exception"],[13,"Return"],[13,"InvalidOperationForType"],[13,"UndefinedVariable"],[13,"CalledNonFunctionType"],[13,"AccessPropertyNonObject"],[13,"SetPropertyNonObject"],[13,"NonClassSuperClass"],[13,"MismatchedArity"],[13,"AccessMissingField"],[13,"Boolean"],[13,"Number"],[13,"String"],[13,"NativeFunction"],[13,"UserFunction"],[13,"Class"],[13,"Instance"],[13,"Scanning"],[13,"OpConversion"],[13,"MissingToken"],[13,"InputRequired"],[13,"MisplacedToken"],[13,"Number"],[13,"String"],[13,"Identifier"],[13,"UnexpectedChar"],[13,"F64ParseFailure"],[13,"Conversion"],[13,"InsufficientRemainingData"],[13,"Validation"],[13,"IncompatibleTypes"],[13,"UndefinedVariable"],[13,"Number"],[13,"Bool"],[13,"Object"]]},\
"walox_test_util":{"doc":"Test utilities","t":[16,13,13,8,3,4,2,11,11,11,11,11,11,11,11,10,2,0,11,11,11,11,5,5,2,11,11,12,2,5,2,12,2,11,11,2,11,11,11,11,11,11,12,5,5],"n":["Args","Error","Ok","Test","TestOutput","TestResult","anyhow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","execute","filecheck","filecheck_helpers","fmt","fmt","from","from","get_panic_message","get_workspace_root","globwalk","into","into","name","num_cpus","output_test_outputs","regex","result","threadpool","to_owned","to_owned","tracing_subscriber","try_from","try_from","try_into","try_into","type_id","type_id","reason","create_filecheckers","execute_filecheck_tests"],"q":["walox_test_util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","walox_test_util::TestResult","walox_test_util::filecheck_helpers",""],"d":["The arguments, if any, to the tests","The test failed with a specific reason","The test completed successfully","A family of tests","The result of a named test execution","The outcome of a test.","","","","","","","","","","Run the test and return the result.","","Test helper methods that are specific to filecheck tests.","","","Returns the argument unchanged.","Returns the argument unchanged.","Take an <code>Any</code> trait object and attempt to cast it to some …","Ascending from the current directory, find the workspace …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The name of the test instance","","Print a list of <code>TestOutput</code>s and a summary.","","The outcome of the test instance","","","","","","","","","","","The reason the test failed","Create a pair of <code>Checker</code> objects that will check the …","Execute a suite of filecheck tests."],"i":[15,2,2,0,0,0,0,1,2,1,2,1,2,1,2,15,0,0,1,2,1,2,0,0,0,1,2,1,0,0,0,1,0,1,2,0,1,2,1,2,1,2,16,0,0],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],2],0,0,[[1,3],4],[[2,3],4],[[]],[[]],[5,[[7,[6]]]],[[],[[9,[8]]]],0,[[]],[[]],0,0,[[10,11],9],0,0,0,[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[14,6]],[6,9]],"p":[[3,"TestOutput"],[4,"TestResult"],[3,"Formatter"],[6,"Result"],[8,"Any"],[15,"str"],[4,"Option"],[3,"PathBuf"],[6,"Result"],[8,"Write"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"],[3,"Vec"],[8,"Test"],[13,"Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
